1.开发体验
	=> 将java代码编写到扩展名为.java的文件中。
	=> 通过 javac 命令对该文件进行编译。
	=> 通过 Java 命令对生成的 class 文件(字节码文件，有几个class就生成几个字节码文件)进行运行。
	
2.
	=> javac filename:filename不分区大小写，因为Windows不区分大小写，而
		 javac 去找filename的过程还是让Windows去找，所以filename不区分大小写。
	
	=> java classname:Java对classname区分大小写
	
3.单行注释、多行注释、文档注释

4.java源文件中可以声明多个class，但是，只能最多有一个类声明为public的。

5.JDK = JRE + Java的开发工具（javac.exe,java.exe,javadoc.exe)
	JRE = JVM + Java 的核心类库
	
6.变量的使用
	=> 先声明再初始化最后才能使用。
	=> 变量有块级作用域
	=> 同意作用域中不能声明俩个同名的变量
	补充：Java源文件中不可以声明两个同名的class
	
7.变量数据类型：
	=> 基本数据类型
		整型：byte \ short \ int \ long
		浮点型：float \ double
		字符型：char
		布尔型：boolean
		
	=> 引用数据类型
		类（class），注意：字符串就是类。
		接口（interface）
		数组（array）
		
8.声明变量：数据类型 + 变量标识符
	=> long = 2 int = 4 short = 8 byte = 64 bit
	=> 整型(通常使用int型)
		注意：声明 long型变量，必须以"l"或"L"结尾。
		！！常量默认是int 类型
		
	=> 浮点型(通常使用double型)
		！！注意：必须以"f"或"F"结尾。若结尾没加默认是double类型
		
	=> 字符型
		-> 声明：使用一对 ''
		-> char类型变量内部只能写一个字符
		-> 表示方式：1.声明一个字符 2.转义字符（\n 换行符，\t 制表符）3.使用Unicode表示字符型变量
		
	=> 布尔型
	
9.基本数据类型变量间的运算规则
	=> 自动类型提升
		=> 结论：存储范围小的数据类型和范围大的数据做运算时，结果自动提升为容量大的数据类型。  
			！！必须用容量大的数据类型去承接。 
		=> 存储范围小的能转换成范围大的，反之则不行。
		=> ！！注意：当byte、char、short三种类型的变量做运算时，结果为int型
			
	=> 强制类型转换：自动类型提升运算的逆运算
		=> 需要使用强转符：(数据类型) 变量
		=> 注意：强制类型转换可能导致精度损失
		
10.String类型变量的使用
	=> String属于引用数据类型
	=> 声明String类型变量时，使用一对 ""
	
11.逻辑与和短路与的区别(逻辑或和短路或类似)：
	=> 逻辑与的判断方式是：
		从左到右依次判断，直到结尾（逻辑全程运算）
	=> 短路与的判断方式是: 
		从左到右依次判断，直到出现false为止将不再判断，直接得到结果为false（短路遇false就停）
		
		
一、Java 面向对象学习的三条主线：
  1.Java类及类的成员：属性、方法、构造器、代码块、内部类
  
  2.面向对象的三大特征：封装性、继承性、多态性、（抽象性）
  
  3.其他关键字：this/super/static/abstract/interface/package/import
  
  “大处着眼，小处着手”
 
 二、类和对象的的使用（面向对象思想的落地实现）
 三、每个对象都独立拥有类的一套属性
 
 四、属性和局部变量的区别：
 	1、属性：类的属性，根据其类型，都有初始化值。加载到堆空间（非static）
 					整型：0
 					浮点型：0.0
 					字符型：0（或'\u0000')
 					布尔型：false
 					引用数据类型：null
 
 	2、局部变量：声明在方法内、方法形参、代码块、构造器形参、构造器内部的变量，没有默认初始化值。加载到栈空间
 
 五、不能再方法中又定义一个方法
 
 六、理解“万事万物既然对象”
 	1.再Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构
 	2.Java在于前端和数据库交互的过程中，数据都会转换为对象。
			
 七、面向对象的特征
		1.封装与隐藏
			=> 封装性的体现之一：避免用户使用"对象.属性"的方式对属性进行赋值，则需要将属性声明为私有的(private)
			=> 隐藏性：将类的属性私有化（private），同时，提供公共的（public）方法来获取和设置属性
			=> 拓展：
			
	八、构造器
		作用：
			1.创建对象
			2.初始化对象的信息
			X
		说明：
			１.若没有显示地定义类的构造器，则系统会默认提供一个空参的构造器
			２.构造器的重载：即可以有多个构造器
			３.自定义了类的构造器后，系统就不再提供默认的空参构造器
			
　九、JavaBean	
		＝＞　JavaBean是一种Java语言写的可重用组件
		
	十、this修饰、调用：属性、方法、构造器
		１.在类的方法中，通常省略this，特殊情况：方法的形参和类的属性同名
		２.在类的构造器中，通常省略this，特殊情况：构造器的形参和类的属性同名
		３.this调构造器
			①　我们再类的构造器中，可以显示的使用＂this（形参列表）＂方式调用本类中的其他构造器
			②　构造器中不能通过＂this（形参列表）＂方式调自己
			③　若一个类中有n个构造器，则最多有ｎ－１构造器中使用了＂this（形参列表）＂
			④　规定，“this（形参列表）”必须声明在当前构造函数的首行
			⑤　构造器内部只能用一个＂this（形参列表）＂方式调用本类中的其他构造器
			